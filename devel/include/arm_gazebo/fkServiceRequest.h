// Generated by gencpp from file arm_gazebo/fkServiceRequest.msg
// DO NOT EDIT!


#ifndef ARM_GAZEBO_MESSAGE_FKSERVICEREQUEST_H
#define ARM_GAZEBO_MESSAGE_FKSERVICEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace arm_gazebo
{
template <class ContainerAllocator>
struct fkServiceRequest_
{
  typedef fkServiceRequest_<ContainerAllocator> Type;

  fkServiceRequest_()
    : angles()
    , links()  {
    }
  fkServiceRequest_(const ContainerAllocator& _alloc)
    : angles(_alloc)
    , links(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _angles_type;
  _angles_type angles;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _links_type;
  _links_type links;





  typedef boost::shared_ptr< ::arm_gazebo::fkServiceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_gazebo::fkServiceRequest_<ContainerAllocator> const> ConstPtr;

}; // struct fkServiceRequest_

typedef ::arm_gazebo::fkServiceRequest_<std::allocator<void> > fkServiceRequest;

typedef boost::shared_ptr< ::arm_gazebo::fkServiceRequest > fkServiceRequestPtr;
typedef boost::shared_ptr< ::arm_gazebo::fkServiceRequest const> fkServiceRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arm_gazebo::fkServiceRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arm_gazebo::fkServiceRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::arm_gazebo::fkServiceRequest_<ContainerAllocator1> & lhs, const ::arm_gazebo::fkServiceRequest_<ContainerAllocator2> & rhs)
{
  return lhs.angles == rhs.angles &&
    lhs.links == rhs.links;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::arm_gazebo::fkServiceRequest_<ContainerAllocator1> & lhs, const ::arm_gazebo::fkServiceRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace arm_gazebo

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::arm_gazebo::fkServiceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arm_gazebo::fkServiceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arm_gazebo::fkServiceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arm_gazebo::fkServiceRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_gazebo::fkServiceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_gazebo::fkServiceRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arm_gazebo::fkServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ea15aaceb74bd9e7419424c414492313";
  }

  static const char* value(const ::arm_gazebo::fkServiceRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xea15aaceb74bd9e7ULL;
  static const uint64_t static_value2 = 0x419424c414492313ULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_gazebo::fkServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arm_gazebo/fkServiceRequest";
  }

  static const char* value(const ::arm_gazebo::fkServiceRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arm_gazebo::fkServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] angles\n"
"float64[] links\n"
;
  }

  static const char* value(const ::arm_gazebo::fkServiceRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arm_gazebo::fkServiceRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.angles);
      stream.next(m.links);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct fkServiceRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm_gazebo::fkServiceRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arm_gazebo::fkServiceRequest_<ContainerAllocator>& v)
  {
    s << indent << "angles[]" << std::endl;
    for (size_t i = 0; i < v.angles.size(); ++i)
    {
      s << indent << "  angles[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.angles[i]);
    }
    s << indent << "links[]" << std::endl;
    for (size_t i = 0; i < v.links.size(); ++i)
    {
      s << indent << "  links[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.links[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARM_GAZEBO_MESSAGE_FKSERVICEREQUEST_H
